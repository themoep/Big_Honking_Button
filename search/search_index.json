{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Big Honking Button User Guide # Big Honking Button is, well, a big button that honks. Okay, that's not all- it\u2019s actually a simple sampler in a very silly package. It has pitch CV, gate in, gate out, and you can store up to 4mb of samples on it. Getting support and help # We want you to have a wonderful experience with your module. If you need help or run into problems, please reach out to us. Email is the best way for product issues, whereas Discord and GitHub are great for getting advice and help on how to customize your module. Send us an email . File a bug on GitHub Reach out on the Discord Installing the module # To install this into your Eurorack setup: Connect a Eurorack power cable to your power supply and the back of the module. Note that even though the power connector on the module is keyed, double check that the red stripe is on the side labeled red stripe ! Screw the module to your rack's rails. Inputs and outputs # Big Honking Button has two inputs: A gate / trigger in A pitch CV in that is 1v/Oct with a -5v to +5v range see note And two outputs: A gate / trigger out ( 0v or 5v ) An audio out With the default code, it will trigger the sample and play it through the audio out whenever the button is pressed or whenever the gate input is triggered. It will also set the gate out to high whenever the button is pressed or whenever the gate in is high. You can customize some of this behavior by modifying the code . Revision differences Big Honking Buttons manufactured prior to 2021 (marked v4 on the backside) only have an input range of -2v to +2v . More than that won't damage the module, but it won't be able to measure anything outside of that range. Changing the sample # You can change the sample on Big Honking Button by connecting it to your computer via a micro USB cable. The USB port is located on the module's main circuit board, located under the panel. Please note that you do have to power the module in order for the USB connection to work - the module doesn't draw any power from the USB port. Samples must be in mono, 16-bit, 44.1kHz, signed wav files. Adafruit has an excellent guide on how to convert sound files , though your sample can be 44.1kHz and not 22kHz. To modify the sample that plays: Connect the Big Honking Button to your computer using a micro USB cable. It should show up as a small external drive named CIRCUITPY Navigate to the samples folder in the drive Rename or delete the existing honk.wav file Copy your sample over and rename it to honk.wav Your Big Honking Button will reboot and then it should play the new sample! If you run into trouble, please reach out . You can store and play multiple samples on the Big Honking Button, but to do that, you'll need to learn how to modify some of the code - don't worry! It's not too hard. Modifying the code # When connected to your computer, Big Honking Button shows up as a small drive named CIRCUITPY . In that drive, you should find a file named code.py . Big Honking Button runs CircuitPython which means that its firmware is written in the approachable Python programming language and you don't need any special knowledge or compilers to make changes to it. So, open up that file in your favorite text editor, we're going to make some changes! If you don't have a text editor - that's okay! While you could use Notepad (Windows) or TextEdit (Mac), these can sometimes have issues with CircuitPython devices like Big Honking Button. I'd recommend installing Mu if you're new to this whole world. You can read more about editing code for CircuitPython in Adafruit's guide . As a way to get your feet let's change how the Big Honking Button behaves. By default, when you press the button it plays the entire sample, even if you release the button while the sample is still playing (this is trigger mode ). This will make it where the sample will stop as soon as you let go of the button (or gate mode). In the code.py you should see some code that looks like this (it's at the bottom): if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. # bhb.stop() Modify this code so that it looks like this: if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. bhb . stop () Be careful Python is whitespace-sensitive . That means tabs and spaces are important! Make sure that you don't accidentally change the indentation level of this line. Okay, save the file! Your Big Honking Button should restart and now it should stop the sample as soon as you let go of the button, try pressing it rapidly to see the effect. Tip If things aren't working, see the section below on finding problems or reach out ! Congrats , you've made your first change to how the module works! \ud83c\udf89 Big Honking Button can do all sorts of neat stuff by changing its code. Check out the examples or jump in the deep end with the code reference . Don't be afraid to experiment and reach out if you need any help! If you want to you can learn more about CircuitPython to the most of your module. Also, please come chat on the Discord where you can ask questions and see what others are doing with their Big Honking Button! Examples # Big Honking Button can do all sorts of things! We've made a few examples to show you some of the things it can do: Sorry, your browser doesn't support embedded videos. To use these examples, connect your Big Honking Button to your computer just like you would when modifying the code . Once connected, copy the contents of the example you want to try (linked below) to code.py on the CIRCUITPY drive. Be sure to save it as the correct name, if you don't name it code.py it won't change anything. If you want to restore the original code.py it is here . Cycle example : Shows how to load multiple samples and cycle between them. Random example : Shows how to load multiple samples and choose one at random. CV select example : Shows how to load multiple samples and use the CV input to select which one to play. Press & release example shows how to play a different sample when pressing the button and releasing the button. Separate button & gate example shows how to play a different sample depending on if the button was pressed or the gate in was triggered. Burst example shows how to play a \"burst\" of samples when the button is pressed. Tap tempo example : Shows how to use the button to set the tempo and have the module play back a sample at each beat. Sine example : An advanced example that shows how to generate a custom waveform. Noise example : An advanced example that shows how to generate noise. If you're ready to go beyond the examples, check out the code reference . Help! I changed some code and this thing isn't working! # There's probably some sort of error in the program. Don't worry, you can get it figured out. If you connect using the serial console you should be able to see the error. If you don't see it right away, you might need to reset the board (either by pressing the little button on the bottom of the module or power cycling your synth). Sometimes you can press Ctrl+C followed by Ctrl+D in the serial console to get the board to reset and tell you the error. In any case, reach out on Discord and we can walk you through figuring out what went wrong. Code reference # Big Honking Button runs CircuitPython and provides a helpful BigHonkingButton class for accessing the hardware and features. The first thing that you'll do in your code is import that class and create an instance: import winterbloom_bhb bhb = winterbloom_bhb . BigHonkingButton () In a lot of cases, the first thing you'll do with the bhb instance is load some samples: honk = bhb . load_sample ( \"samples/honk.wav\" ) clap = bhb . load_sample ( \"samples/clap.wav\" ) Once you're all set up, you'll start the update loop : while bhb . update (): ... This loop will repeat over and over. Each time the loop is run, bhb.update() is called and it will read in the state of the button, gate in, and CV input. You have to call bhb.update() otherwise it won't ever know if things change! Inputs # While inside the loop you can check the state of the various inputs. First, you can check if either the button has been pressed or the gate in has gone from low to high: if bhb . triggered : ... Similarly, you can check if either the button has been released or the gate has gone from high to low: if bhb . released : ... These two states are demonstrated in the default example : while bhb . update (): if bhb . triggered : bhb . play ( \"honk.wav\" ) elif bhb . released : bhb . stop () You can get more specific by checking the button and gate independently. You can use the button property to check the button: if bhb . button . pressed : # Button was just pressed. ... if bhb . button . released : # Button was just released. ... if bhb . button : # Button is held down. Likewise, you can use the gate_in property to check the gate input: if bhb . gate_in . rising_edge : # Gate in just moved from low to high. ... if bhb . gate_in . falling_edge : # Gate in just moved from high to low. ... if bhb . gate_in : # The gate input is being held high. Aliases For convenience, bhb.button and bhb.gate_in have property aliases. .pressed , .rising_edge , and .triggered are all the same, likewise, .released and .falling_edge are the same. The pitch CV input is a little different. You can use bhb.pitch_in to read the voltage on the pitch CV input. Remember, the input range is -5v to +5v . if bhb . pitch_in > 0 : ... More usefully you can use the pitch input to re-pitch the sample: bhb.play(honk, pitch_cv=bhb.pitch_in) There are other ways you can use the CV input, for instance, the CV select example uses it to select from a list of samples. Outputs # Big Honking Button has two outputs: an audio out and a gate out. The audio out can be used to play previously-loaded samples: bhb . play ( honk ) It can also play the sample repeatedly: bhb . play ( honk , repeat = True ) And re-pitch the sample: # Play at twice the frequency bhb . play ( honk , pitch_cv = 2.0 ) # Play at half the frequency bhb . play ( honk , pitch_cv = 0.5 ) # Play at normal pitch bhb . play ( honk , pitch_cv = 1.0 ) By default, the sample will play all the way through. If you want to stop the sample you can use bhb.stop() : if bhb . pressed : bhb . play ( some_long_sample ) elif bhb . released : bhb . stop () When stop() is called the sample stops playing immediately - even if its in the middle of playback. If you play a new sample while a sample is playing, the old sample will stop immediately and the new one will start playing. Finally, there's the gate out: if bhb . pressed : # Sets the output to +5v bhb . gate_out = True elif bhb . released : # Sets the output to 0v bhb . gate_out = False Updating the firmware # Updating the firmware requires two steps: Updating CircuitPython and updating Big Honking Button's libraries. Updating CircuitPython # Download the latest version of CircuitPython for Winterbloom Big Honking Button . Connect Big Honking Button to your computer via USB. The USB port is located underneath the panel. Note that you still have to power the module from a Eurorack power supply. Place Big Honking Button in bootloader mode by pressing the reset button twice quickly. The reset button is located on the bottom of the module just below the power connector. Once in bootloader mode, you should see a drive on your computer named HONKBOOT . Copy the uf2 file from step 1 to the HONKBOOT drive. The module should restart by itself. Updating Big Honking Button's libraries # Download the latest release bundle for Big Honking Button . Unzip the release bundle, and then copy the contents to Big Honking Button's CIRCUITPY drive, replacing any existing files. Reboot Big Honking Button by power cycling your synthesizer or pressing the reset button again. Open source hardware & software # Big Honking Button is completely open source and hacking is encouraged. The firmware is available under the MIT License . The hardware design is available under the CC BY-SA 4.0 License and is designed using KiCAD which is free and open-source. You can open the hardware files using KiCAD or you can check out a PDF of the schematic . CircuitPython is available under the MIT License . Big Honking Button is certified open source hardware . Warranty, disclaimers, and limits # Modules purchased from Winterbloom have a warranty of six months from the date of purchase. This warranty covers any manufacturing defects in the module. It does not cover damage from due to incorrect handling, storage, or power, overvoltage events, or modifications. Please contact us if you are experiencing issues with your module. Modules returned under warranty will either be refunded, replaced, or repaired at our discretion. You will be responsible for the cost of returning the module to Winterbloom. Because Eurorack has a vast number of possible combinations of power supplies, modules, cases, and accessories, it is impossible for us to guarantee compatibility with every possible configuration. We make a reasonable effort to test modules with several power supplies, cases, and other modules. We encourage tinkering, however, we will not refund, repair, or replace any products that have been modified. Acknowledgments and thanks # Big Honking Button would not be possible without the help of the CircuitPython community and Adafruit Industries.","title":"User Guide"},{"location":"#getting-support-and-help","text":"We want you to have a wonderful experience with your module. If you need help or run into problems, please reach out to us. Email is the best way for product issues, whereas Discord and GitHub are great for getting advice and help on how to customize your module. Send us an email . File a bug on GitHub Reach out on the Discord","title":"Getting support and help"},{"location":"#installing-the-module","text":"To install this into your Eurorack setup: Connect a Eurorack power cable to your power supply and the back of the module. Note that even though the power connector on the module is keyed, double check that the red stripe is on the side labeled red stripe ! Screw the module to your rack's rails.","title":"Installing the module"},{"location":"#inputs-and-outputs","text":"Big Honking Button has two inputs: A gate / trigger in A pitch CV in that is 1v/Oct with a -5v to +5v range see note And two outputs: A gate / trigger out ( 0v or 5v ) An audio out With the default code, it will trigger the sample and play it through the audio out whenever the button is pressed or whenever the gate input is triggered. It will also set the gate out to high whenever the button is pressed or whenever the gate in is high. You can customize some of this behavior by modifying the code . Revision differences Big Honking Buttons manufactured prior to 2021 (marked v4 on the backside) only have an input range of -2v to +2v . More than that won't damage the module, but it won't be able to measure anything outside of that range.","title":"Inputs and outputs"},{"location":"#changing-the-sample","text":"You can change the sample on Big Honking Button by connecting it to your computer via a micro USB cable. The USB port is located on the module's main circuit board, located under the panel. Please note that you do have to power the module in order for the USB connection to work - the module doesn't draw any power from the USB port. Samples must be in mono, 16-bit, 44.1kHz, signed wav files. Adafruit has an excellent guide on how to convert sound files , though your sample can be 44.1kHz and not 22kHz. To modify the sample that plays: Connect the Big Honking Button to your computer using a micro USB cable. It should show up as a small external drive named CIRCUITPY Navigate to the samples folder in the drive Rename or delete the existing honk.wav file Copy your sample over and rename it to honk.wav Your Big Honking Button will reboot and then it should play the new sample! If you run into trouble, please reach out . You can store and play multiple samples on the Big Honking Button, but to do that, you'll need to learn how to modify some of the code - don't worry! It's not too hard.","title":"Changing the sample"},{"location":"#modifying-the-code","text":"When connected to your computer, Big Honking Button shows up as a small drive named CIRCUITPY . In that drive, you should find a file named code.py . Big Honking Button runs CircuitPython which means that its firmware is written in the approachable Python programming language and you don't need any special knowledge or compilers to make changes to it. So, open up that file in your favorite text editor, we're going to make some changes! If you don't have a text editor - that's okay! While you could use Notepad (Windows) or TextEdit (Mac), these can sometimes have issues with CircuitPython devices like Big Honking Button. I'd recommend installing Mu if you're new to this whole world. You can read more about editing code for CircuitPython in Adafruit's guide . As a way to get your feet let's change how the Big Honking Button behaves. By default, when you press the button it plays the entire sample, even if you release the button while the sample is still playing (this is trigger mode ). This will make it where the sample will stop as soon as you let go of the button (or gate mode). In the code.py you should see some code that looks like this (it's at the bottom): if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. # bhb.stop() Modify this code so that it looks like this: if bhb . released : bhb . gate_out = False # Uncomment the call to stop to make the sample # stop playing as soon as you release the button. bhb . stop () Be careful Python is whitespace-sensitive . That means tabs and spaces are important! Make sure that you don't accidentally change the indentation level of this line. Okay, save the file! Your Big Honking Button should restart and now it should stop the sample as soon as you let go of the button, try pressing it rapidly to see the effect. Tip If things aren't working, see the section below on finding problems or reach out ! Congrats , you've made your first change to how the module works! \ud83c\udf89 Big Honking Button can do all sorts of neat stuff by changing its code. Check out the examples or jump in the deep end with the code reference . Don't be afraid to experiment and reach out if you need any help! If you want to you can learn more about CircuitPython to the most of your module. Also, please come chat on the Discord where you can ask questions and see what others are doing with their Big Honking Button!","title":"Modifying the code"},{"location":"#examples","text":"Big Honking Button can do all sorts of things! We've made a few examples to show you some of the things it can do: Sorry, your browser doesn't support embedded videos. To use these examples, connect your Big Honking Button to your computer just like you would when modifying the code . Once connected, copy the contents of the example you want to try (linked below) to code.py on the CIRCUITPY drive. Be sure to save it as the correct name, if you don't name it code.py it won't change anything. If you want to restore the original code.py it is here . Cycle example : Shows how to load multiple samples and cycle between them. Random example : Shows how to load multiple samples and choose one at random. CV select example : Shows how to load multiple samples and use the CV input to select which one to play. Press & release example shows how to play a different sample when pressing the button and releasing the button. Separate button & gate example shows how to play a different sample depending on if the button was pressed or the gate in was triggered. Burst example shows how to play a \"burst\" of samples when the button is pressed. Tap tempo example : Shows how to use the button to set the tempo and have the module play back a sample at each beat. Sine example : An advanced example that shows how to generate a custom waveform. Noise example : An advanced example that shows how to generate noise. If you're ready to go beyond the examples, check out the code reference .","title":"Examples"},{"location":"#help-i-changed-some-code-and-this-thing-isnt-working","text":"There's probably some sort of error in the program. Don't worry, you can get it figured out. If you connect using the serial console you should be able to see the error. If you don't see it right away, you might need to reset the board (either by pressing the little button on the bottom of the module or power cycling your synth). Sometimes you can press Ctrl+C followed by Ctrl+D in the serial console to get the board to reset and tell you the error. In any case, reach out on Discord and we can walk you through figuring out what went wrong.","title":"Help! I changed some code and this thing isn't working!"},{"location":"#code-reference","text":"Big Honking Button runs CircuitPython and provides a helpful BigHonkingButton class for accessing the hardware and features. The first thing that you'll do in your code is import that class and create an instance: import winterbloom_bhb bhb = winterbloom_bhb . BigHonkingButton () In a lot of cases, the first thing you'll do with the bhb instance is load some samples: honk = bhb . load_sample ( \"samples/honk.wav\" ) clap = bhb . load_sample ( \"samples/clap.wav\" ) Once you're all set up, you'll start the update loop : while bhb . update (): ... This loop will repeat over and over. Each time the loop is run, bhb.update() is called and it will read in the state of the button, gate in, and CV input. You have to call bhb.update() otherwise it won't ever know if things change!","title":"Code reference"},{"location":"#inputs","text":"While inside the loop you can check the state of the various inputs. First, you can check if either the button has been pressed or the gate in has gone from low to high: if bhb . triggered : ... Similarly, you can check if either the button has been released or the gate has gone from high to low: if bhb . released : ... These two states are demonstrated in the default example : while bhb . update (): if bhb . triggered : bhb . play ( \"honk.wav\" ) elif bhb . released : bhb . stop () You can get more specific by checking the button and gate independently. You can use the button property to check the button: if bhb . button . pressed : # Button was just pressed. ... if bhb . button . released : # Button was just released. ... if bhb . button : # Button is held down. Likewise, you can use the gate_in property to check the gate input: if bhb . gate_in . rising_edge : # Gate in just moved from low to high. ... if bhb . gate_in . falling_edge : # Gate in just moved from high to low. ... if bhb . gate_in : # The gate input is being held high. Aliases For convenience, bhb.button and bhb.gate_in have property aliases. .pressed , .rising_edge , and .triggered are all the same, likewise, .released and .falling_edge are the same. The pitch CV input is a little different. You can use bhb.pitch_in to read the voltage on the pitch CV input. Remember, the input range is -5v to +5v . if bhb . pitch_in > 0 : ... More usefully you can use the pitch input to re-pitch the sample: bhb.play(honk, pitch_cv=bhb.pitch_in) There are other ways you can use the CV input, for instance, the CV select example uses it to select from a list of samples.","title":"Inputs"},{"location":"#outputs","text":"Big Honking Button has two outputs: an audio out and a gate out. The audio out can be used to play previously-loaded samples: bhb . play ( honk ) It can also play the sample repeatedly: bhb . play ( honk , repeat = True ) And re-pitch the sample: # Play at twice the frequency bhb . play ( honk , pitch_cv = 2.0 ) # Play at half the frequency bhb . play ( honk , pitch_cv = 0.5 ) # Play at normal pitch bhb . play ( honk , pitch_cv = 1.0 ) By default, the sample will play all the way through. If you want to stop the sample you can use bhb.stop() : if bhb . pressed : bhb . play ( some_long_sample ) elif bhb . released : bhb . stop () When stop() is called the sample stops playing immediately - even if its in the middle of playback. If you play a new sample while a sample is playing, the old sample will stop immediately and the new one will start playing. Finally, there's the gate out: if bhb . pressed : # Sets the output to +5v bhb . gate_out = True elif bhb . released : # Sets the output to 0v bhb . gate_out = False","title":"Outputs"},{"location":"#updating-the-firmware","text":"Updating the firmware requires two steps: Updating CircuitPython and updating Big Honking Button's libraries.","title":"Updating the firmware"},{"location":"#updating-circuitpython","text":"Download the latest version of CircuitPython for Winterbloom Big Honking Button . Connect Big Honking Button to your computer via USB. The USB port is located underneath the panel. Note that you still have to power the module from a Eurorack power supply. Place Big Honking Button in bootloader mode by pressing the reset button twice quickly. The reset button is located on the bottom of the module just below the power connector. Once in bootloader mode, you should see a drive on your computer named HONKBOOT . Copy the uf2 file from step 1 to the HONKBOOT drive. The module should restart by itself.","title":"Updating CircuitPython"},{"location":"#updating-big-honking-buttons-libraries","text":"Download the latest release bundle for Big Honking Button . Unzip the release bundle, and then copy the contents to Big Honking Button's CIRCUITPY drive, replacing any existing files. Reboot Big Honking Button by power cycling your synthesizer or pressing the reset button again.","title":"Updating Big Honking Button's libraries"},{"location":"#open-source-hardware-software","text":"Big Honking Button is completely open source and hacking is encouraged. The firmware is available under the MIT License . The hardware design is available under the CC BY-SA 4.0 License and is designed using KiCAD which is free and open-source. You can open the hardware files using KiCAD or you can check out a PDF of the schematic . CircuitPython is available under the MIT License . Big Honking Button is certified open source hardware .","title":"Open source hardware &amp; software"},{"location":"#warranty-disclaimers-and-limits","text":"Modules purchased from Winterbloom have a warranty of six months from the date of purchase. This warranty covers any manufacturing defects in the module. It does not cover damage from due to incorrect handling, storage, or power, overvoltage events, or modifications. Please contact us if you are experiencing issues with your module. Modules returned under warranty will either be refunded, replaced, or repaired at our discretion. You will be responsible for the cost of returning the module to Winterbloom. Because Eurorack has a vast number of possible combinations of power supplies, modules, cases, and accessories, it is impossible for us to guarantee compatibility with every possible configuration. We make a reasonable effort to test modules with several power supplies, cases, and other modules. We encourage tinkering, however, we will not refund, repair, or replace any products that have been modified.","title":"Warranty, disclaimers, and limits"},{"location":"#acknowledgments-and-thanks","text":"Big Honking Button would not be possible without the help of the CircuitPython community and Adafruit Industries.","title":"Acknowledgments and thanks"},{"location":"build/","text":"Big Honking Button Kit Build Guide # Welcome to the build guide for the Big Honking Button! We hope you have a great time putting this module together and a wonderful time using it. Please read all instructions thoroughly before starting. If you have questions or run into trouble please reach out to us on discord or drop us an email at support@winterbloom.com This build is a beginner level kit. Some soldering experience is helpful but not required. If it's your first time soldering we recommend reading through Adafruit's guide to excellent soldering . This build takes around two hours to complete. Tools and materials required # Before jumping in, make sure you have: A soldering iron, like this one Solder, we can recommend Adafruit's 60/40 no-clean rosin core solder . We suggest using soldering with \"no clean\" flux. If you do use a different kind of flux, be sure to carefully clean the flux residue off based on the guidelines provided by the manufacturer of your solder. A lighter, candle, or some other heat source for the shrink wrap. A hot air station is ideal, not not necessary. Kit contents # Your kit should contain the following items. If any are missing please email us at support@winterbloom.com . Test test test Eurorack power cable (1) Front panel (1) Retaining ring (1) Mainboard (1) Wiring harness (1) JST header (1) Rubber band (1) M3x6 screws (2) Heat shrink (2) Hex nuts for the 1/8\" jacks (4) 1/8\" jacks (4) Eurorack power header (1) SANWA arcade button (1) (1) Panel (1) SANWA arcade button (1) Big Honking Button mainboard (1) Button wiring harness (2) Short pieces of heat-shrink tubing (1) 10-pin Eurorack power connector (black) (1) 2-pin JST header (green) (4) 1/8\" jacks (4) Hex nuts for the 1/8\" jacks (1) Retaining ring (colors vary) (1) Rubber band (1) Eurorack power cable (2) M3 screws for attaching the module to your rack We program, test, and calibrate the mainboard before sending it to you, so you don't have to worry about any of that- once you're done building you'll be good to go! Soldering the jacks # The first step is to solder the 1/8\" jacks on to the mainboard. Place the jacks onto the front side of the board. The front side has the outline of the jacks printed on it, so it should be easy to spot! Once the jacks are placed, you can use the panel to hold them in place while soldering them. Place the panel over the top of the jacks: The use the rubber band to hold the panel onto the jacks and board. Place it between the two rows of jacks. Double (or triple) it over to make sure it's taut. Tip Make sure that the jacks are flush against the board before soldering. You can double-check after each solder joint and adjust them if necessary. Now you can solder each of the pins from the jacks to the board. Take care not to burn the rubber band. There are three solder joints per jack for a total of twelve. Soldering the JST connector # Next you'll need to solder the green JST connector to the PCB. Unlike the jacks, The JST connector goes on the back side of the board, next to where the power header goes. Pay special attention to the orentation of the JST connector. It only goes on correctly one way- It shouldn't be overhanging the board, it should come right up to the edge. Just like with the 1/8\" jacks, flip the board over and solder the two pins of the JST connector to the board. Make sure the connector is flush with the board after making the first solder joint. If needed, you can use a piece of tape to hold it in place. Soldering the power connector # Next up is the 10-pin Eurorack power connector. The power connector also goes on the back side of the board. When placing note the notch in the outline on the board . You'll need to make sure the slot on the connector matches where the notch is on the outline . The slot should be facing the edge of the board. Once placed you can solder the 10 pins on the other side of the board. Be careful here and avoid touching the small components near the pins with your iron. Check and make sure the connector is flush with the board as you go. Soldering the wire harness to the button # Set the board aside for a moment because the next step is to attach the wire harness to the button. You'll need the button, wire harness, and the two small pieces of heat shrink tubing. First, place the two pieces of heat-shrink tubing onto the two wires on the wire harness. Push them all the way to the white connector for now. Carefully solder the wires from the harness onto the lugs on the button one at a time. You may need to get a friend to hold the button for you to keep it from moving around. Make sure the heat-shrink tubing stays on the wires. Now you can push the heat-shrink tubing over the solder joints and the lugs to cover the connections. Use your lighter, candle, hot air station to shrink the tubing over the connectors. Careful The heat shrink will not completely shrink around the wire side so do not apply excess heat - you can melt the wire's sleeving. If using a hot air station set the temperature to no higher than 150\u00b0C. Putting the button in the panel # All of the soldering is complete! You can put away the soldering iron. The next step it to place the button snugly into the panel. Push the wires through the big hole in the panel: Then push the button into the hole - it should snap into place. Flip the panel over so that you can see the back part of the button and grab the small plastic retaining ring. Note that your ring might be a different color: Slip the ring over the wires: And then push the ring firmly over the button. It should click into place with a satisfying snap and the button should now be snug as a bug in a rug. Secure the panel # Now that the button is in place you can secure the panel to the mainboard. Just like you did when soldering on the jacks, place the panel over the jacks and push them through the panel: Now take the hex nuts and screw them onto the jacks: Don't over-tighten - finger tight is generally good enough. Connect the button # Now you can connect the button's white connector to the green JST header on the board. Place it so that the tab on the connector matches the notch in the header and push it into place: Make sure to push the connector all the way in. It should snap in and hold in place. All done # Congratulations! You've finished your very own Big Honking Button! Now that it's all put together go check out the User's Guide and please show us your work by tweeting at @wntrblm or tagging @wntrblm in your instagram post.","title":"Kit Build Instructions"},{"location":"build/#tools-and-materials-required","text":"Before jumping in, make sure you have: A soldering iron, like this one Solder, we can recommend Adafruit's 60/40 no-clean rosin core solder . We suggest using soldering with \"no clean\" flux. If you do use a different kind of flux, be sure to carefully clean the flux residue off based on the guidelines provided by the manufacturer of your solder. A lighter, candle, or some other heat source for the shrink wrap. A hot air station is ideal, not not necessary.","title":"Tools and materials required"},{"location":"build/#kit-contents","text":"Your kit should contain the following items. If any are missing please email us at support@winterbloom.com . Test test test Eurorack power cable (1) Front panel (1) Retaining ring (1) Mainboard (1) Wiring harness (1) JST header (1) Rubber band (1) M3x6 screws (2) Heat shrink (2) Hex nuts for the 1/8\" jacks (4) 1/8\" jacks (4) Eurorack power header (1) SANWA arcade button (1) (1) Panel (1) SANWA arcade button (1) Big Honking Button mainboard (1) Button wiring harness (2) Short pieces of heat-shrink tubing (1) 10-pin Eurorack power connector (black) (1) 2-pin JST header (green) (4) 1/8\" jacks (4) Hex nuts for the 1/8\" jacks (1) Retaining ring (colors vary) (1) Rubber band (1) Eurorack power cable (2) M3 screws for attaching the module to your rack We program, test, and calibrate the mainboard before sending it to you, so you don't have to worry about any of that- once you're done building you'll be good to go!","title":"Kit contents"},{"location":"build/#soldering-the-power-connector","text":"Next up is the 10-pin Eurorack power connector. The power connector also goes on the back side of the board. When placing note the notch in the outline on the board . You'll need to make sure the slot on the connector matches where the notch is on the outline . The slot should be facing the edge of the board. Once placed you can solder the 10 pins on the other side of the board. Be careful here and avoid touching the small components near the pins with your iron. Check and make sure the connector is flush with the board as you go.","title":"Soldering the power connector"},{"location":"build/#soldering-the-wire-harness-to-the-button","text":"Set the board aside for a moment because the next step is to attach the wire harness to the button. You'll need the button, wire harness, and the two small pieces of heat shrink tubing. First, place the two pieces of heat-shrink tubing onto the two wires on the wire harness. Push them all the way to the white connector for now. Carefully solder the wires from the harness onto the lugs on the button one at a time. You may need to get a friend to hold the button for you to keep it from moving around. Make sure the heat-shrink tubing stays on the wires. Now you can push the heat-shrink tubing over the solder joints and the lugs to cover the connections. Use your lighter, candle, hot air station to shrink the tubing over the connectors. Careful The heat shrink will not completely shrink around the wire side so do not apply excess heat - you can melt the wire's sleeving. If using a hot air station set the temperature to no higher than 150\u00b0C.","title":"Soldering the wire harness to the button"},{"location":"build/#putting-the-button-in-the-panel","text":"All of the soldering is complete! You can put away the soldering iron. The next step it to place the button snugly into the panel. Push the wires through the big hole in the panel: Then push the button into the hole - it should snap into place. Flip the panel over so that you can see the back part of the button and grab the small plastic retaining ring. Note that your ring might be a different color: Slip the ring over the wires: And then push the ring firmly over the button. It should click into place with a satisfying snap and the button should now be snug as a bug in a rug.","title":"Putting the button in the panel"},{"location":"build/#secure-the-panel","text":"Now that the button is in place you can secure the panel to the mainboard. Just like you did when soldering on the jacks, place the panel over the jacks and push them through the panel: Now take the hex nuts and screw them onto the jacks: Don't over-tighten - finger tight is generally good enough.","title":"Secure the panel"},{"location":"build/#connect-the-button","text":"Now you can connect the button's white connector to the green JST header on the board. Place it so that the tab on the connector matches the notch in the header and push it into place: Make sure to push the connector all the way in. It should snap in and hold in place.","title":"Connect the button"},{"location":"build/#all-done","text":"Congratulations! You've finished your very own Big Honking Button! Now that it's all put together go check out the User's Guide and please show us your work by tweeting at @wntrblm or tagging @wntrblm in your instagram post.","title":"All done"}]}